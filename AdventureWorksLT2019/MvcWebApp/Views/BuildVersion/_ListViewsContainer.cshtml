@using AdventureWorksLT2019.Resx;
@using Framework.Mvc.Models;
@using Framework.Models;
@using AdventureWorksLT2019.MvcWebApp.Models;
@using AdventureWorksLT2019.Models.Definitions;
@model ListSearchViewModel<BuildVersionAdvancedQuery, BuildVersionDataModel[]>
@inject IHttpContextAccessor Accessor
@inject SelectListHelper selectListHelper;
@inject IUIStrings localizor;
@{
    var format_All = localizor.Get("Format_All");
}
<div class="card nt-list-wrapper" id="@Model!.UIListSetting.UIListFeatures.ListWrapperId"
    data-nt-bs-modalsize="Large"
    data-nt-submittarget="#@Model!.UIListSetting.UIListFeatures.SearchFormId"
    data-nt-loaditem-url="@Url.Action("AjaxLoadItem", "BuildVersion")"
    data-nt-createitem-url="@Url.Action("AjaxCreate", "BuildVersion")"
    data-nt-updateitem-url="@Url.Action("AjaxEdit", "BuildVersion")"
    data-nt-deleteitem-url="@Url.Action("AjaxDelete", "BuildVersion")"
    data-nt-bulk-delete-url="@Url.Action("AjaxBulkDelete", "BuildVersion")"
    data-nt-multiitems-submit-url="@Url.Action("AjaxMultiItemsCUDSubmit", "BuildVersion")">
    <div class="card-header">
        @if (Model!.UIListSetting == null || Model!.UIListSetting.UIListFeatures.HasPageSizeList || Model!.UIListSetting.UIListFeatures.HasOrderByList)
        {
            <div class="btn-group float-end mt-1 ms-3 me-0 nt-page-size-and-order-by">
                <button class="btn btn-default dropdown-toggle" type="button" id="ddlPageSizeAndOrderBy@Model!.UIListSetting.UIListFeatures.ListWrapperId" data-bs-toggle="dropdown" data-bs-auto-close="true" aria-expanded="false">
                    <i class="fa-solid fa-sliders"></i>
                </button>
                <ul class="dropdown-menu" aria-labelledby="ddlPageSizeAndOrderBy@Model!.UIListSetting.UIListFeatures.ListWrapperId">
                    @if (Model!.UIListSetting == null || Model.UIListSetting.UIListFeatures.HasOrderByList)
                    {
                        foreach (var orderBy in Model.OrderByList)
                        {
                            <li class="nt-order-by-item ps-2" data-nt-page-size="@orderBy.Value" style="min-width: 200px;">
                                <div class="clearfix">
                                    <i class="fa-solid fa-check pe-2 float-start" @Html.Raw(orderBy.Value == Model.Query.OrderBys ? "" : "style='display:none'")></i>
                                    <span class="float-end pe-2">@Html.Raw(orderBy.Name)</span>
                                </div>
                            </li>
                        }
                    }
                    <li class="dropdown-divider" />
                    @if (Model!.UIListSetting == null || Model.UIListSetting.UIListFeatures.HasPageSizeList)
                    {
                        foreach (var pageSize in Model.PageSizeList)
                        {
                            <li class="nt-page-size-item ps-2" data-nt-page-size="@pageSize.Value" style="min-width: 200px;">
                                <div class="clearfix">
                                    <i class="fa-solid fa-check pe-2 float-start" @Html.Raw(pageSize.Value == Model.Query.PageSize.ToString() ? "" : "style='display:none'")></i>
                                    <span class="float-end pe-2">@Html.Raw(pageSize.Name)</span>
                                </div>
                            </li>
                        }
                    }
                </ul>
            </div>
        }
        <div class="btn-group float-end mt-1" role="group" aria-label="View Options">
            <input type="radio" class="btn-check nt-radio-pagedviewoption" name="btnradio" id="btnradio-Table" autocomplete="off"
                data-bs-toggle="modal" data-bs-target="#fullScreenLoading"
                data-nt-value="Table" data-nt-paginationoptionupdatevalue="PageIndexesAndAllButtons" @(Model!.UIListSetting.UIParams.PagedViewOption==ListViewOptions.Table ? "checked": "")>
            <label class="btn btn-outline-primary" for="btnradio-Table" title="Table" aria-label="Table"><i class="fa-solid fa-table-list"></i></label>
            <input type="radio" class="btn-check nt-radio-pagedviewoption" name="btnradio" id="btnradio-Tiles" autocomplete="off"
                data-bs-toggle="modal" data-bs-target="#fullScreenLoading"
                data-nt-value="Tiles" data-nt-paginationoptionupdatevalue="LoadMore" @(Model!.UIListSetting.UIParams.PagedViewOption==ListViewOptions.Tiles ? "checked": "")>
            <label class="btn btn-outline-primary" for="btnradio-Tiles" title="Tiles" aria-label="Tiles"><i class="fa-solid fa-grip"></i></label>
            <input type="radio" class="btn-check nt-radio-pagedviewoption" name="btnradio" id="btnradio-SlideShow" autocomplete="off"
                data-bs-toggle="modal" data-bs-target="#fullScreenLoading"
                data-nt-value="SlideShow" data-nt-paginationoptionupdatevalue="NoPagination" @(Model!.UIListSetting.UIParams.PagedViewOption==ListViewOptions.SlideShow ? "checked": "")>
            <label class="btn btn-outline-primary" for="btnradio-SlideShow" title="SlideShow" aria-label="SlideShow"><i class="fa-solid fa-circle-play"></i></label>
            <input type="radio" class="btn-check nt-radio-pagedviewoption" name="btnradio" id="btnradio-EditableTable" autocomplete="off"
                data-bs-toggle="modal" data-bs-target="#fullScreenLoading"
                data-nt-value="EditableTable" data-nt-paginationoptionupdatevalue="PageIndexesAndAllButtons" @(Model!.UIListSetting.UIParams.PagedViewOption == ListViewOptions.EditableTable ? "checked": "")>
            <label class="btn btn-outline-primary" for="btnradio-EditableTable" title="EditableTable" aria-label="EditableTable"><i class="fa-solid fa-pen-ruler"></i></label>
        </div>
        @if (Model!.UIListSetting == null || Model!.UIListSetting.ShowListBulkActionRelated(true))
        {
            <div class="btn-group m-0 p-0 float-start nt-bulk-select-filter">
                <button type="button" class="btn btn-default m-0 p-0 btn-nt-bulk-select-status" data-nt-bulk-select-status="None">
                    <!--None/Some/All-->
                    <i class="fa-regular fa-square"></i>
                    <i class="fa-regular fa-square-minus d-none"></i>
                    <i class="fa-regular fa-square-check d-none"></i>
                </button>
                <button type="button" class="btn btn-default dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="visually-hidden">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu">
                </ul>
            </div>
        }
        <div class="btn-group float-start nt-refresh-button-group">
            <button type="button" class="btn btn-default btn-nt-fresh">
                <i class="fa-solid fa-rotate-right"></i>
            </button>
        </div>
        @if (Model!.UIListSetting == null || Model!.UIListSetting.ShowListBulkActionRelated(false))
        {
            <div class="btn-group float-start ps-4 nt-bulk-actions-container" style="display:none">
                <button type="button" class="btn btn-default nt-bulk-delete" data-bs-toggle="modal" data-bs-target="#simpleActionConfirmationDialog"
                    data-nt-confirmation-message="@string.Format(localizor.Get("Please_confirm_you_want_to_delete_selected"), localizor.Get("BuildVersion"))" title="@localizor.Get("Delete")">
                    <i class="fa fa-trash"></i>
                </button>
            </div>
        }
    </div>
    <div class="card-body nt-list-container-submit row m-0 p-0">
        <!--Developer keep this logic same on all Index.cshtml, although the 3 views may not available for some tables-->
        @if (Model.UIListSetting == null || Model.UIListSetting.UIParams.PagedViewOption == ListViewOptions.Table || Model.UIListSetting.UIParams.PagedViewOption == ListViewOptions.EditableTable)
        {
            @await Html.PartialAsync("~/Views/BuildVersion/_Table.cshtml", Model)
        }
        else if (Model.UIListSetting.UIParams.PagedViewOption == ListViewOptions.Tiles)
        {
            @await Html.PartialAsync("~/Views/BuildVersion/_Tiles.cshtml", Model)
        }
        else if (Model.UIListSetting.UIParams.PagedViewOption == ListViewOptions.SlideShow)
        // SlideShow
        {
            @await Html.PartialAsync("~/Views/BuildVersion/_SlideShow.cshtml", Model)
        }
    </div>
    <div class="fixed-bottom">
        <div class="float-start ms-5 ps-5 border-2 nt-singlton-message-popup bg-info" style="display:none">
        </div>
        <div class="btn-group float-end m-4">
            @if (Model!.UIListSetting == null || Model!.UIListSetting.CanGotoCreate(@CrudViewContainers.StandaloneView))
            {
                <a asp-area="" asp-controller="BuildVersion" asp-action="Create" class="btn btn-secondary" role="button" title="@localizor.Get("Create")">
                    <i class="fa fa-plus"></i>
                </a>
            }
            @if (Model!.UIListSetting == null || Model!.UIListSetting.CanGotoCreate(@CrudViewContainers.Dialog))
            {
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#crudActionDialog" title="@localizor.Get("Create_New")"
                    data-nt-action="@HttpMethods.Post"
                    data-nt-route-id="@(default(byte) + "/" + default(System.DateTime) + "/" + default(System.DateTime))"
                    data-nt-container="@CrudViewContainers.Dialog.ToString()"
                    data-nt-template="@ViewItemTemplates.Create.ToString()">
                    <i class="fa fa-plus"></i>
                </button>
            }
        </div>
    </div>
</div>
